// generated by a tool
// common add/edit components
import React, { Component } from 'react';
import { Formik, Field, Form, ErrorMessage, FormikErrors, getIn } from 'formik';
import queryString from 'query-string';
import { History } from 'history';
import { ErrorControl } from '../../controls/error-control';
import { Loading } from '../../controls/loading';
import {AnimateIn} from "../../controls/animate-in";
import { Redirect } from 'react-router-dom'
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import RatingInput  from '../../controls/rating/ratingInput';

// sub-components for {{cs_name Name}} 
import { {{cs_name Name}} } from './{{cs_name Name}}';
import { {{cs_name Name}}ApiClient } from './{{cml_case Name}}ApiClient';
import { {{cs_name Name}}Validate } from './{{cml_case Name}}Validate';
import {{cs_name Name}}{{OperationNameFriendly}}Rendering from './{{cml_case Name}}{{OperationNameFriendly}}Rendering';
{{#if CurrentOperation.UsesModel}}
import { {{cs_name Name}}{{OperationName}}Model } from "./{{cs_name Name}}{{OperationName}}Model";
{{/if}}
{{#each CurrentOperation.UserProvidedParameters}}
{{#if IsCustomTypeOrCustomArray}}
import { {{ResolvedTypescriptTypeUnderlying}} } from './{{ResolvedTypescriptTypeUnderlying}}'
{{/if}}
{{/each}}
{{#if IsUpdate}}
{{#if HasSelectAllType}}
import { {{cs_name SelectAllType.Name}} } from './{{cs_name SelectAllType.Name}}';
{{/if}}
{{/if}}
{{#if AssociateViaLink}}
    
// linking with other types    
import { linkedItem } from '../../linked-items';
{{#each LinkedDetails}}
import { {{cs_name LinkingType.Name}}ApiClient } from '../{{kb_case LinkingType.Name}}/{{cml_case LinkingType.Name}}ApiClient';
import { {{cs_name LinkingType.Name}}InsertModel } from '../{{kb_case LinkingType.Name}}/{{cs_name LinkingType.Name}}InsertModel';
{{/each}}
{{/if}}
{{#each CurrentOperation.ParameterReferenceTypes}}
import { {{cs_name Name}}Select } from '../{{kb_case Name}}/{{cml_case Name}}Select';
{{/each}}

export interface I{{cs_name Name}}{{OperationNameFriendly}}State {
	{{#if CurrentOperation.UsesModel}}
    data: {{cs_name Name}}{{OperationName}}Model;
	{{#if IsUpdate}}
	fetched: {{cs_name SelectAllType.Name}} | null;
	{{/if}}
	{{else}}
	{{#each CurrentOperation.UserProvidedParameters}}
    {{cml_case Name}}: {{ResolvedTypescriptTypeUnderlying}} | null;
    {{/each}}
	{{/if}}
    error: boolean;
	message?: string | null;
	{{#if IsUpdate}}
	loading: boolean;	
	{{/if}}
}

export interface I{{cs_name Name}}{{OperationNameFriendly}}Props {
	history? : History;
	onSaved? (result: {{CurrentOperation.TypeScriptReturn}}) : void; 
	location? : any;
	title? : string;
	{{#if AssociateViaLink}}
	linkedType? : string;
	linkedId? : number | null;
	{{/if}}
	{{#if IsUpdate}}
	id?: {{get_ts_type IdentityField.ClrType}} | null;
	match?: any;
	{{/if}}
    {{#each CurrentOperation.EditableLinkingFields}}
    {{cml_case Name}} : {{get_ts_type ClrType}} | null;
    {{/each}}
}

export class {{cs_name Name}}{{OperationNameFriendly}} extends Component<I{{cs_name Name}}{{OperationNameFriendly}}Props,I{{cs_name Name}}{{OperationNameFriendly}}State> {

    private api: {{cs_name Name}}ApiClient = new {{cs_name Name}}ApiClient();
	private validation: {{cs_name Name}}Validate = new {{cs_name Name}}Validate();
	private rendering: {{cs_name Name}}{{OperationNameFriendly}}Rendering = new {{cs_name Name}}{{OperationNameFriendly}}Rendering();
	private qry: any = this.props && this.props.location ? queryString.parse(this.props.location.search) : null;

    constructor(props: I{{cs_name Name}}{{OperationNameFriendly}}Props) {
        super(props);
		{{#if IsUpdate}}
		var providedData = this.getProvidedData();
		{{/if}}

        this.state = {
			{{#if CurrentOperation.UsesModel}}			
			data: {{#if IsUpdate}}providedData ? providedData :{{/if}} {
				{{#each CurrentOperation.UserProvidedParameters}}
				{{#if RelatedTypeField.HasReferenceType}}
					{{#unless RelatedTypeField.ReferencesType.IsReferenceData}}
				{{cml_case Name}}: this.{{cml_case Name}},
					{{else}}
				{{cml_case Name}}: null,
					{{/unless}}
				{{else}}
				{{cml_case Name}}: null,
				{{/if}}
				{{/each}}			
			},
			{{#if IsUpdate}}
			fetched: null,
			{{/if}}
			{{else}}
			{{#each CurrentOperation.UserProvidedParameters}}
			{{#if RelatedTypeField.HasReferenceType}}
			{{#unless RelatedTypeField.ReferencesType.IsReferenceData}}
			{{cml_case Name}}: this.{{cml_case Name}},
			{{else}}
			{{cml_case Name}}: null,
			{{/unless}}
			{{else}}
                {{#if IsCustomTypeOrCustomArray}}
            {{cml_case Name}}: {
                    {{#each CustomType.Fields}}
                        {{#if HasReferenceType}}
                            {{#unless ReferencesType.IsReferenceData}}
                {{cml_case Name}}: this.{{cml_case Name}},
                            {{else}}
                {{cml_case Name}}: null,
                            {{/unless}}
                        {{else}}            
                {{cml_case Name}}: null,
                        {{/if}}    
                    {{/each}}   
            },
                {{else}}
             {{cml_case Name}}: null,
                {{/if}}
			{{/if}}
			{{/each}}
			{{/if}}
			{{#if IsUpdate}}
			loading: providedData == null,
			{{/if}}
			error: false
		};

		this.cancelSave = this.cancelSave.bind(this);
        this.handleSubmit = this.handleSubmit.bind(this);
		this.validate = this.validate.bind(this);
    }

	cancelSave(event: any){
		if (this.props.history) {
			this.props.history.goBack();		
		}
	}

    {{#each CurrentOperation.EditableLinkingFields}}
    get {{cml_case Name}}() : {{get_ts_type ClrType}} | null {
        if (this.props.{{cml_case Name}}){
            return this.props.{{cml_case Name}};
        }

        if (this.props.location.state && this.props.location.state.linkedType == "{{cml_case ReferencesType.Name}}") {
            return this.props.location.state.linkedId;
        }

        if (this.qry.{{cml_case Name}} && !Array.isArray(this.qry.{{cml_case Name}})) {
        {{#if IsInt}}
            return parseInt(this.qry.{{cml_case Name}});
        {{else}}
            return this.qry.{{cml_case Name}};
        {{/if}}
        }

        return null;
    }
	{{/each}}

	{{#if IsUpdate}}
	getProvidedData() : {{cs_name Name}}{{OperationName}}Model | null {
		if (this.props.location.state && this.props.location.state.data){
			return this.props.location.state.data;
		}
		return null;
	}

	getId() : {{get_ts_type IdentityField.ClrType}} | null {
		if (this.props.id) {
			return this.props.id;
		}

		// get from uri
		if (this.props.match) {
			const { id } = this.props.match.params;
			if (id) {
				return id;
			}		
		}

		return null;
	}

	componentDidUpdate(): void {
        var id = this.getId();
		if (id && (id != this.state.data.id)) {
            this.getItemDetails(id);
        }
    }

	componentDidMount(): void {
        var id = this.getId();
		if (id && (id != this.state.data.id)) {
            this.getItemDetails(id);
        }
    }
	{{/if}}

	{{#if IsAttachment}}
    handleSubmit(fields : any) {
		var formData = new FormData();
		{{#each CurrentOperation.UserProvidedParameters}}
		if (fields.{{cml_case Name}}){
			{{#if RelatedTypeField.IsFile}}
			formData.append('{{cml_case Name}}',fields.{{cml_case Name}});		
			{{else}}
			formData.append('{{cml_case Name}}',fields.{{cml_case Name}}.toString());		
			{{/if}}
		}
		{{/each}}
		this.api.{{cml_case OperationName}}(formData).then(data => {
			{{#unless IsUpdate}}
			if (data.parsedBody) {
                this.createLinkedItemAssociation(data.parsedBody);
            }
			{{/unless}}
			if (this.props.onSaved && data.parsedBody) {
                this.props.onSaved(data.parsedBody);
            } else if (this.props.history) {
                this.props.history.goBack();
            }
        });
    }
	{{else}}
    handleSubmit(fields : any) {
        {{#if CurrentOperation.UsesCustomType}}
        console.log(fields);
        {{/if}}
		{{#if CurrentOperation.UsesModel}}
		this.api.{{cml_case OperationName}}(fields).then(data => {
        {{else}}
		this.api.{{cml_case OperationName}}({{#each CurrentOperation.UserProvidedParameters}}fields.{{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}}).then(data => { 
		{{/if}}
			{{#if AssociateViaLink}}
			if (data.parsedBody) {
                this.createLinkedItemAssociation(data.parsedBody);
            }
			{{/if}}
			if (this.props.onSaved && data.parsedBody) {
                this.props.onSaved(data.parsedBody);
            } else if (this.props.history) {
                this.props.history.goBack();
            }
        });
    }
	{{/if}}

	{{#if CurrentOperation.UsesModel}}
	validate(state: {{cs_name Name}}{{OperationName}}Model): FormikErrors<{{cs_name Name}}{{OperationName}}Model> {
        return this.validation.validate{{cs_name CurrentOperation.BareName}}(state);
    }
	{{else}}
	validate(state: I{{cs_name Name}}{{OperationNameFriendly}}State): FormikErrors<I{{cs_name Name}}{{OperationNameFriendly}}State> {
        return this.validation.validate{{cs_name CurrentOperation.BareName}}(state);
    }
	{{/if}}

	{{#if AssociateViaLink}}
	createLinkedItemAssociation(id: number) {
		// creation via location from a link, or via linkedId and linkedType properties
        if (this.props.location || (this.props.linkedId && this.props.linkedType)) {
			
			var linked : [string, number] | null = null;
			if (this.props.linkedId && this.props.linkedType){
				linked = [this.props.linkedType, this.props.linkedId];
			} else {
				linked = linkedItem(this.props.location.state);			
			}

			if (linked) {
				{{#each LinkedDetails}}
				if (linked[0] == "{{Name}}") {
					var {{cml_case LinkingType.Name}}Client = new {{cs_name LinkingType.Name}}ApiClient();
					var {{cml_case LinkingType.Name}}Model: {{cs_name LinkingType.Name}}InsertModel = { {{cml_case LinkedTypeIdFieldName}}: linked[1], {{cml_case ../Name}}Id: id };
					{{cml_case LinkingType.Name}}Client.insert({{cml_case LinkingType.Name}}Model);
				}
				{{/each}}
			}		
		}
    }
	{{/if}}


    render() {
        return (
		<AnimateIn>
		<Formik {{#if IsUpdate}}enableReinitialize{{/if}} initialValues={ {{CurrentOperation.StatePath}} } onSubmit={this.handleSubmit} validate={this.validate}
            render={({ errors, status, touched, setFieldValue, values }) => (
			<div>
                {this.renderTitle()}
				{{#if IsUpdate}} { this.state.loading ? <Loading /> : null } {{/if}}
				{ this.state.error ? <ErrorControl message={this.state.message ? this.state.message : ""} /> : null }
                <Form autoComplete="off">                        
					{{#each CurrentOperation.UserInputFields}}											
						{{#if IsBoolean}}
						<div className="form-group row form-check col-sm-10 offset-sm-2">								
							<Field type="checkbox" id="{{cml_case NameWithPath}}" name="{{cml_case NameWithPath}}" className={'form-check-input' + (getIn(errors, '{{cml_case NameWithPath}}') && getIn(touched, '{{cml_case NameWithPath}}') ? ' is-invalid' : '')} checked={ values.{{cml_case NameWithPathSafe}} } onChange={(e:any) => {
								setFieldValue('{{cml_case NameWithPath}}', e.target.checked);
                            }}/>
							<label className="form-check-label" htmlFor="{{cml_case NameWithPath}}">{{#if Field.IsRequired}}<span className='required-indicator'>*</span>{{/if}}{{hmn}}</label>
							<ErrorMessage name="{{cml_case NameWithPath}}" component="div" className="invalid-feedback" />
						</div>
						{{else}}
						<div className="form-group row">
							<label className="col-sm-2 col-form-label" htmlFor="{{cml_case NameWithPath}}">{{hmn Name}}{{#if Field.IsRequired}}<span className='required-indicator'>*</span>{{/if}}</label>
							<div className="col-sm-10">
							{{#if Field.HasReferenceType}}
							<Field id="{{cml_case NameWithPath}}" name="{{cml_case NameWithPath}}" component={ {{cs_name Field.ReferencesType.Name}}Select } value={ {{../CurrentOperation.StatePath}}?.{{cml_case NameWithPathSafe}} } className={(getIn(errors,'{{cml_case NameWithPath}}') && getIn(touched, '{{cml_case NameWithPath}}') ? 'invalid-select' : '')} {{#unless Field.ReferencesType.IsReferenceData}} readonly={this.{{cml_case Name}} != null} {{/unless}} />
							{{else}}
								{{#if IsDateTime}}
								<DatePicker id="{{cml_case NameWithPath}}" name="{{cml_case NameWithPath}}" className={'form-control' + (getIn(errors, '{{cml_case NameWithPath}}') && getIn(touched, '{{cml_case NameWithPath}}') ? ' is-invalid' : '')} selected={ values.{{cml_case NameWithPathSafe}} } onChange={(date, dateString) =>
                                    setFieldValue("{{cml_case NameWithPath}}", date)
                                } />
								{{else}}
									{{#if IsLargeTextContent}}
								<Field id="{{cml_case NameWithPath}}" name="{{cml_case NameWithPath}}" component="textarea" className={'form-control' + (getIn(errors, '{{cml_case NameWithPath}}' && getIn(touched, '{{cml_case NameWithPath}}') ? ' is-invalid' : '')} placeholder="Enter {{hmn Name}}" />  
									{{else}}
									{{#if IsFile}}
								<input type="file" id="{{cml_case NameWithPath}}" name="{{cml_case NameWithPath}}" className={'form-control' + (errors.contents && touched.contents ? ' is-invalid' : '')} placeholder="Enter {{hmn Name}}" onChange={(event: any) => {
                                    setFieldValue("contents", event.currentTarget.files[0]);
                                }} />  
									{{else}}
										{{#if IsRating}}
								<RatingInput name="{{cml_case NameWithPath}}" />
										{{else}}
                                            {{#if IsColor}}
								<Field id="{{cml_case NameWithPath}}" name="{{cml_case NameWithPath}}" type="color" className={'form-control' + (getIn(errors, '{{cml_case NameWithPath}}') && getIn(touched, '{{cml_case NameWithPath}}') ? ' is-invalid' : '')} placeholder="Enter {{hmn Name}}" />                                
										    {{else}}
								<Field id="{{cml_case NameWithPath}}" name="{{cml_case NameWithPath}}" type="{{input_type ClrType}}" className={'form-control' + (getIn(errors, '{{cml_case NameWithPath}}') && getIn(touched, '{{cml_case NameWithPath}}') ? ' is-invalid' : '')} placeholder="Enter {{hmn Name}}" />                                
                                            {{/if}}    
                                        {{/if}}
									{{/if}}
									{{/if}}
								{{/if}}
							{{/if}}
							<ErrorMessage name="{{cml_case NameWithPath}}" component="div" className="invalid-feedback" />
							</div>
						</div>
						{{/if}}						
					{{/each}}
					<div className="row">
						<div className="col-sm-10 offset-sm-2">
							<input className="btn btn-primary mr-1" type="submit" value="Save" />
							<button type="button" className="btn btn-outline-secondary" onClick={this.cancelSave}>Cancel</button>
						</div>						
					</div>
                </Form>
            </div>
			)
		}/>
		</AnimateIn>
        );
    }

	renderTitle() : JSX.Element | null {
		if (this.props.title){
			return <h1>{this.props.title}</h1>;
		}
		
		var customTitle = this.rendering.renderCustomTitle(this.state);
		if (customTitle){
			return customTitle;
		}

		return <h1>{{OperationNameFriendly}} {{hmn Name}}</h1>;
	}

	{{#if IsUpdate}}
	async getItemDetails(id: number) {
        await this.api.selectForDisplayById(id).then(data => {
            if (data.parsedBody && data.parsedBody.length > 0) {
				var newData = {
					{{#each CurrentOperation.UserProvidedParameters}}
					{{#if IsFile}}
					{{cml_case Name}}: null,
					{{else}}
					{{cml_case Name}}: data.parsedBody[0].{{cml_case Name}},
					{{/if}}
					{{/each}}				
				}
				this.setState({ data: newData, loading: false, fetched: data.parsedBody[0] });								
			} else {
				this.setState({ loading: false, error: true, message: "Item Not Found" });				
			}            
        }).catch(err => {
            this.setState({ loading: false, error: true, message: err.message });
        });
    }
	{{/if}}
}