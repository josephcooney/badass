// generated by a tool
import React, { Component } from 'react';
import Select from 'react-select';
import { {{cs_name SelectAllType.Name}} } from './{{cs_name SelectAllType.Name}}';
import { {{cs_name Name}}ApiClient } from './{{cml_case Name}}ApiClient';

interface {{cs_name Name}}SelectState {
    data: {{cs_name SelectAllType.Name}}[];
	value: {{get_ts_type IdentityField.ClrType}} | null; 
	loading: boolean;
	error: boolean;
}

interface {{cs_name Name}}SelectProps {
    value : {{get_ts_type IdentityField.ClrType}} | null;
    readonly: boolean;
    onChange: any;
    field: any; 
    className: string;
}

export class {{cs_name Name}}Select extends Component<{{cs_name Name}}SelectProps, {{cs_name Name}}SelectState> {
    private api : {{cs_name Name}}ApiClient = new {{cs_name Name}}ApiClient();

    constructor(props: {{cs_name Name}}SelectProps ) {
        super(props);
        this.state = { data: [], value: props.value, loading: true, error: false};
		this.handleChange = this.handleChange.bind(this);
    }

    componentDidMount() {
        this.getSelectData();
    }

	handleChange(item : any, actionMeta: any) {
        this.setState({error: this.state.error, data: this.state.data, value: item.value, loading: this.state.loading });
		if (this.props.onChange) {
			this.props.onChange(item.value);		
        }
        if (this.props.field.onChange) {
            this.props.field.onChange({target: { value: item.value, name: this.props.field.name }});
        }
    }

	handleInputChange(inputText: string) {
        // TODO - "searching large lists version will do things here"
    }

    render{{cs_name Name}}Select(data: {{cs_name SelectAllType.Name}}[]) {

        {{#if HasDisplayField}}
		var options = data.map(d => ({ value: d.id, label: d.{{cml_case DisplayField.Name}} }));
		{{else}}
		var options = data.map(d => ({ value: d.id, label: {{#each LinkingFields}}d.{{cml_case Name}}{{#unless @last}} + " - " + {{/unless}}{{/each}} }));
		{{/if}}
        var selected = options.find(o => o.value === this.state.value);
		
		return (
        <Select options={options} onInputChange={this.handleInputChange} value={selected} onChange={this.handleChange} className={this.props.className} isDisabled={this.props.readonly} />
        );
    }

    render() {
		var contents = null;
        if (this.state.error) {
            contents = <span>Error</span>
        } else {
            contents = this.state.loading
            ? <span><em>Loading...</em></span>
            : this.render{{cs_name Name}}Select(this.state.data);
        }

        return ( <div>{contents}</div> );
    }

    async getSelectData() {
        await this.api.selectAllForDisplay().then(data => {
            var responseBody = data.parsedBody;
            if (responseBody) {
                this.setState({ data: responseBody, loading: false });
            }
        }).catch(err => {
            this.setState({ data: [], loading: false, error: true });
        });
    }
}
