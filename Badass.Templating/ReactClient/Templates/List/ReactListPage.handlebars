// generated by a tool
import React, { Component } from 'react';
import { {{cs_name Name}} } from '../{{cs_name Name}}';
import { {{cs_name Name}}Row } from './{{cml_case Name}}Row';
import { {{cs_name Name}}Header } from './{{cml_case Name}}Header';

import { AnimateIn} from "../../../controls/animate-in";
import { {{cs_name UnderlyingType.Name}}ApiClient } from '../{{cml_case UnderlyingType.Name}}ApiClient';
import { Link } from 'react-router-dom';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faPlus } from '@fortawesome/free-solid-svg-icons';
import { Loading } from '../../../controls/loading';
import {{cs_name Name}}ListRendering from './{{cml_case Name}}ListRendering';

export interface {{cs_name Name}}ListState {
    data: {{cs_name Name}}[];
    loading: boolean;
	error: boolean;
    message?: string;
}

interface {{cs_name Name}}ListProps {
    data?: {{cs_name Name}}[] | null;
	hideHeading?: boolean | null;
	hideAddButton? : boolean | null;
	linkedType? : string | null;
	linkedId? : number | string | null;
}

export class {{cs_name Name}}List extends Component<{{cs_name Name}}ListProps, {{cs_name Name}}ListState> {

    private api : {{cs_name UnderlyingType.Name}}ApiClient = new {{cs_name UnderlyingType.Name}}ApiClient();
	private rendering: {{cs_name Name}}ListRendering = new {{cs_name Name}}ListRendering();

    constructor(props: {{cs_name Name}}ListProps) {
        super(props);

		if (this.props.data){
			this.state = { data: this.props.data, loading: false, error: false };
		}
		else {
			this.state = { data: [], loading: true, error: false };		
		}
    }

	{{#if HasOperations}}
    componentDidMount() {
		if (this.state.loading){
			this.{{cml_case PrimaryOperation.BareName}}();		
		}
    }
	{{/if}}

	componentDidUpdate(): void {
        if (this.props.data && (this.props.data != this.state.data)) {
            this.setState({ data: this.props.data, loading: false, error: false });
        }
    }

    static render{{cs_name Name}}Table(data: {{cs_name Name}}[]) {
		return (
            <AnimateIn>
                <table className='table table-striped'>
                    <thead>
                        <{{cs_name Name}}Header />
                    </thead>
                    <tbody>
                        {data.map(s =>
                            <{{cs_name Name}}Row data={s} key={ s.{{cml_case IdentityField.Name}} } />
                        )}
                    </tbody>
                </table>
            </AnimateIn>
        );
    }

	render() {

		var contents = null;
        if (this.state.error) {
            contents = this.renderError();
        } else {
            if (this.state.loading) {
                contents = <Loading />;
            } else {
				contents = this.state.data.length > 0 ? this.renderData() : "";
			}
        }

        return (
            <div>
				{ this.renderHeading() }                
                <p>{this.renderDescription()}</p>
                {contents}
                {{has UnderlyingType.AddOperations}}
				{this.props.hideAddButton ? null :
					(<Link className="btn btn-primary" to={ {pathname: '/{{kb_case UnderlyingType.Name}}/add' , state: { linkedType: this.props.linkedType, linkedId: this.props.linkedId}} }>
							<FontAwesomeIcon icon={faPlus} className="mr-1" />Add {{UnderlyingType.HumanizedName}}
						</Link>)
				}
                {{/has}}
            </div>
        );
    }

	renderHeading() {
        if (this.props.hideHeading) {
            return null;
        }
        var customHeading = this.rendering.renderCustomHeading(this.state);
        return customHeading ? customHeading : (<h1>{{UnderlyingType.HumanizedNamePlural}}</h1>);
    }

    renderError() {
        var customError = this.rendering.renderCustomError(this.state);
        return customError ? customError : <p><em>Error</em> : {this.state.message}</p>;
    }

    renderData() {
        var customData = this.rendering.renderCustomData(this.state);
        return customData ? customData : ({{cs_name Name}}List.render{{cs_name Name}}Table(this.state.data));
    }

    renderDescription() {
        var customDescription = this.rendering.renderCustomDescription(this.state);
        return customDescription
            ? customDescription
            : (<span>{this.state.data.length > 0 ? null : 'There are no {{UnderlyingType.HumanizedNamePlural}}'}</span>);
    }

	{{#each Operations}}
    async {{cml_case BareName}}() {
        await this.api.{{cml_case BareName}}().then(data => {
            var responseBody = data.parsedBody;
            if (responseBody) {
                this.setState({ data: responseBody, loading: false } as Pick<{{cs_name ../Name}}ListState, keyof {{cs_name ../Name}}ListState>);
            }
        }).catch(err => {
            this.setState({ data: [], loading: false, error: true, message: err.message });
        });
    }
	
	{{/each}}
}
