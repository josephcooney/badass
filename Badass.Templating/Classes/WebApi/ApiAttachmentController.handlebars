// generated by a tool
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.Mvc;
using {{cs_name Namespace}}.Data.Domain;
using {{cs_name Namespace}}.Data.Repository;
using {{cs_name Namespace}}.Models;
using {{cs_name Namespace}}.Services;
{{#if HasCustomResultType}}
using {{cs_name Namespace}}.Data.Model; 
{{/if}}

namespace {{cs_name Namespace}}.Controllers
{	
	[Route("api/{{kb_case Name}}")]
    public partial class {{cs_name Name}}ApiController : Controller
    {
        private {{cs_name Name}}Repository _repository;
        IUserService _userService;
        private readonly IWebHostEnvironment _hostingEnvironment;
        private readonly AttachmentService _attachmentService;

        public {{cs_name Name}}ApiController({{cs_name Name}}Repository repository, IUserService userService, IWebHostEnvironment hostingEnvironment, AttachmentService attachmentService)
        {
            _repository = repository;
            _userService = userService;
            _hostingEnvironment = hostingEnvironment;
            _attachmentService = attachmentService;
        }

        {{#unless AllowAnonGet}}[Authorize]{{/unless}}
		[HttpGet("{id}")]
        [ProducesResponseType(typeof(FileResult), (int)HttpStatusCode.OK)]
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        [Produces("application/octet-stream")]
        public async Task<IActionResult> Get({{format_clr_type IdentityField.ClrType}} id)
        {
			var userId = _userService.GetUserId(HttpContext.User);
            var itemList = await _repository.SelectByIdAsync(id, userId);
            if (itemList != null && itemList.Any())
            {
                var item = itemList.FirstOrDefault();
                return File(item.{{cs_name AttachmentFileField.Name}}, item.{{cs_name AttachmentFieldContentType.Name}});
            }

            return new NotFoundResult();
        }

        {{#if HasThumbnail}}
        {{#unless AllowAnonGet}}[Authorize]{{/unless}}
        [HttpGet("[action]")]
        [ProducesResponseType(typeof(FileResult), (int)HttpStatusCode.OK)] 
        [ProducesResponseType((int)HttpStatusCode.NotFound)]
        [Produces("application/octet-stream")]
        public async Task<IActionResult> Thumbnail({{format_clr_type IdentityField.ClrType}} id)
        {
            var userId = _userService.GetUserId(HttpContext.User);
            var itemList = await _repository.SelectByIdAsync(id, userId);
            if (itemList != null && itemList.Any())
            {
                var item = itemList.FirstOrDefault();
                if (item.Thumbnail != null)
                {
                    return File(item.Thumbnail, item.{{cs_name AttachmentFieldContentType.Name}});
                }
                else
                {
	                var filePath = _attachmentService.GetFilePathForMimeType(item.{{cs_name AttachmentFieldContentType.Name}}, _hostingEnvironment);
	                var fs = new FileStream(filePath, FileMode.Open);
	                return File(fs, "image/svg+xml");
                }
			}

            return new NotFoundResult();
        }
        {{/if}}

        {{#each Operations}}
        {{#unless AllowAnon}}[Authorize]{{/unless}}
		{{#if UsesModel}}
		[Http{{HttpMethod}}("[action]")]
		public async {{#if NoResult}}Task{{else}}Task<{{{Returns}}}>{{/if}} {{cs_name BareName}}([FromForm]{{cs_name Name}}Model model)
		{
			var userId = _userService.GetUserId(HttpContext.User);
			using (var ms = new MemoryStream())
            {
                await model.{{cs_name ../AttachmentFileField.Name}}.CopyToAsync(ms);
                var contents = ms.ToArray();
				var contentType = model.{{cs_name ../AttachmentFileField.Name}}.ContentType;
				{{#unless NoResult}}return{{/unless}} await _repository.{{cs_name BareName}}Async({{#each Parameters}}{{#if IsCurrentUser}}{{#if IsNullable}}userId{{else}}userId.Value{{/if}}{{else}}{{#if RelatedTypeField.IsAttachmentThumbnail}}_attachmentService.CreateThumbnail(contents, contentType){{else}}{{#if RelatedTypeField.IsFile}}contents{{else}}{{#if RelatedTypeField.IsAttachmentContentType}}contentType{{else}}model.{{cs_name Name}}{{/if}}{{/if}}{{/if}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}});
            }
		}
		{{else}}
		[Http{{HttpMethod}}("[action]")]
		public async {{#if NoResult}}Task{{else}}Task<{{{Returns}}}>{{/if}} {{cs_name BareName}}({{#each UserProvidedParameters}}{{format_clr_type ClrType}} {{cml_case Name}}{{#unless @last}}, {{/unless}}{{/each}})
		{
			var userId = _userService.GetUserId(HttpContext.User);
			{{#unless NoResult}}return{{/unless}} await _repository.{{cs_name BareName}}Async({{#each Parameters}}{{#if IsCurrentUser}}{{#if IsNullable}}userId{{else}}userId.Value{{/if}}{{else}}{{cml_case Name}}{{/if}}{{#unless @last}}, {{/unless}}{{/each}});
		}
		{{/if}}

		{{/each}}
    }
}